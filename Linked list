#include <iostream>
using namespace std;


// creating a general node 

class Node{

  public: 

  int data;
  Node* next;

  Node(int value){

    this -> data = value;
    this -> next = NULL;

  }

};

void insertAtHead(Node* &head, Node* &tail, int value){

  if (head == NULL && tail == NULL){

    Node* newNode = new Node(value);
    head = newNode;
    tail = newNode;

  }

  else{

    Node* newNode = new Node(value);
    newNode -> next = head;
    head = newNode;
  }

}


void insertAtTail (Node* &tail, Node* &head, int value){

    if(head == NULL && tail == NULL){

      Node* newNode = new Node(value);
      head = newNode;
      tail = newNode;

    }

    else{

      Node* newNode = new Node(value);
      tail -> next = newNode;
      tail = newNode;
    }
}


    void insertAtValue(Node* &head, Node* &tail, int target, int value){

      Node* temp = head;

      while(temp != NULL && temp -> data != target){
        temp = temp -> next;
      }

      if(temp != NULL){

        Node* newNode = new Node(value);
        newNode -> next  = temp -> next;
        temp -> next = newNode; 

      

      if (temp == tail){

          tail = newNode;

      }

      }

      else {
        cout << "Target value not found in the list." << endl;
    }

    }




  void print(Node* &head){

      Node* temp = head;

      while(temp != NULL){

        cout << " " << temp -> data << " ->";
        temp = temp -> next;

      }

      cout << " NULL" << endl ;

  }
int main() {

  Node* head = NULL;
  Node* tail = NULL;

  insertAtHead(head, tail, 10);
  insertAtHead(head, tail, 20);
  insertAtTail(tail, head, 30);
  insertAtHead(head, tail, 40);
  insertAtTail(tail, head, 50);


  insertAtValue(head, tail, 40 , 70);
  print(head);

  
  return 0;
}
